.visCanvas {
  flex: 1;
  overflow: hidden; /* prevent overflow, notably when resizing */
  z-index: 0; /* stacking context for anything rendered above the canvas (axis grid, SVG scene, floating toolbar, tooltip, etc.) */

  display: grid;
  grid-template-areas:
    '. title'
    'left-axis canvas'
    '. bottom-axis';

  /*
   * Stacking order, from furthest to closest:
   * 1. WebGL canvas
   * 2. axis system (i.e. most notably the grid)
   * 3. SVG overlay
   * 4. anything rendered via `Html` (`Overlay`, `Annotation`, etc.) â€” by default with no z-index, which is equivalent to `z-index: 0`
   * 5. tooltip + guides
   * 6. floating toolbar
   */
  --h5w-zi-canvas: -3000;
  --h5w-zi-axisSystem: -2000;
  --h5w-zi-svgOverlay: -1000;
  --h5w-zi-tooltip: 1000;
  --h5w-zi-floatingToolbar: 2000;
}

.title {
  grid-area: title;
  display: flex;
  justify-content: center;
  align-items: center;
  margin: 0;
  color: var(--h5w-plotTitle--color, inherit);
  font-family: var(--h5w-plotTitle--fontFamily, inherit);
  font-size: var(--h5w-plotTitle--fontSize, 1.125em);
  font-weight: var(--h5w-plotTitle--fontWeight, inherit);
}

.canvasArea {
  grid-area: canvas;
  position: relative; /* for `.r3fRoot`, `.svgOverlay`, `.floatingToolbar`, overflowing annotations, etc. */
  background-color: var(--h5w-canvas--bgColor, transparent);
  user-select: none; /* selection may be restored on specific elements as needed (annotations, etc.) */
}

/*
 * `.canvasArea` is implicitely stacked at `z-index: 0`, so by default it intercepts events
 * before they can reach the canvas (which has a negative `z-index`). We can't stack it explicitly
 * without creating a new stacking context, which would break the stacking order. So we disable
 * pointer events instead. Note that they are restored on `r3fRoot` by R3F. Consumers may also restore
 * pointer events on specific elements (annotations, SVG elements, etc.) to make them interactive.
 */
.canvasArea {
  pointer-events: none;
}

.r3fRoot {
  z-index: var(--h5w-zi-canvas);
}

.htmlOverlay,
.svgOverlay {
  position: absolute;
  left: 0;
  top: 0;
  width: 100%;
  height: 100%;
  overflow: hidden;
}

.svgOverlay {
  z-index: var(--h5w-zi-svgOverlay);
}

.floatingToolbar {
  grid-area: canvas;
  justify-self: end;
  align-self: end;
  z-index: var(--h5w-zi-floatingToolbar);
  display: flex;
}
